{"version":3,"sources":["img/headshot.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","href","src","headshot","alt","target","rel","className","data-name","data-domain","data-tld","onClick","evt","window","location","dataset","name","domain","tld","Boolean","hostname","match","ReactDOM","render","StrictMode","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,sC,2KCoH5BC,MAhHf,WAYE,OACE,oCACE,gCACE,uCACA,gEAAyC,uBAAGC,KAAK,sBAAR,YAEzC,yBACEC,IAAKC,IACLC,IAAI,6EAIR,8BACE,0GAGE,uBACEH,KAAK,wCACLI,OAAO,SACPC,IAAI,uBAHN,YAHF,oBAWE,uBACEL,KAAK,6CACLI,OAAO,SACPC,IAAI,uBAHN,0BAXF,KAqBA,4BACE,+HAKA,uHAKA,kFAEA,8HAKA,uGAKA,iFAGF,2BACE,4BACEC,UAAU,6BACVC,YAAU,MACVC,cAAY,SACZC,WAAS,MACTC,QA7EO,SAAAC,GAQf,OAPAC,OAAOC,SAASb,KAAO,UACrBW,EAAIP,OAAOU,QAAQC,KACnB,IACAJ,EAAIP,OAAOU,QAAQE,OACnB,IACAL,EAAIP,OAAOU,QAAQG,KAEd,MAyEH,2BACE,uBAAGjB,KAAK,wBAAR,mBAGF,2BACE,uBAAGA,KAAK,6BAAR,qBAGF,2BACE,uBAAGA,KAAK,mCAAR,+BAKF,2BACE,uBAAGA,KAAK,sDAAR,+BAKF,2BACE,uBAAGA,KAAK,4DAAR,uBC/FUkB,QACW,cAA7BN,OAAOC,SAASM,UAEe,UAA7BP,OAAOC,SAASM,UAEhBP,OAAOC,SAASM,SAASC,MACvB,2DCLNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,KAAI,kBAAC,EAAD,UAKtBC,SAASC,eAAe,SD6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8974a317.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/headshot.43979e73.jpg\";","import React from 'react';\nimport headshot from './img/headshot.jpg';\nimport './App.scss';\n\nfunction App() {\n  const openMail = evt => {\n    window.location.href = 'mailto:' +\n      evt.target.dataset.name +\n      '@' +\n      evt.target.dataset.domain +\n      '.' +\n      evt.target.dataset.tld;\n\n    return false;\n  }\n\n  return (\n    <>\n      <header>\n        <h1>Joe Sak</h1>\n        <h2>Cloud &amp; Applications Engineer at <a href=\"http://kadenze.com\">Kadenze</a></h2>\n\n        <img\n          src={headshot}\n          alt=\"Professional headshot - vibrant gradient color background, blue t-shirt\"\n        />\n      </header>\n\n      <main>\n        <p>\n          Joe Sak is a software writer living in Guadalajara, Mexico with his\n          wife&nbsp;\n          <a\n            href=\"//www.youtube.com/watch?v=-RAN5l4Q0rw\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Cristina\n          </a>\n          &nbsp;and their&nbsp;\n          <a\n            href=\"//www.youtube.com/watch?v=Y1KSUBvHzx8&t=78\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            two cats, Fuji &amp; Bizen\n          </a>\n          .\n        </p>\n\n        <ul>\n          <li>\n            20 years of full stack web development, project management,\n            professional &amp; personal development\n          </li>\n\n          <li>\n            Hundreds of design agency clients from a variety of business sizes,\n            goals, &amp; industries\n          </li>\n\n          <li>Empathy and human-centered design, work philosophy</li>\n\n          <li>\n            Fundamental skill and continuous sharpening in Ruby, OOP, Rails,\n            HTML, CSS, Javascript, DevOps\n          </li>\n\n          <li>\n            Proactive collaborator in iterative project development and\n            prototyping\n          </li>\n\n          <li>Never done growing, always striving to do better</li>\n        </ul>\n\n        <p>\n          <button\n            className=\"cryptedmail button-as-link\"\n            data-name=\"joe\"\n            data-domain=\"joesak\"\n            data-tld=\"com\"\n            onClick={openMail}\n          ></button>\n        </p>\n\n        <p>\n          <a href=\"//github.com/joemsak\">github/joemsak</a>\n        </p>\n\n        <p>\n          <a href=\"//linkedin.com/in/joemsak\">linkedin/joemsak</a>\n        </p>\n\n        <p>\n          <a href=\"//instagram.com/joe_sak_from_tv\">\n            instagram/@joe_sak_from_tv\n          </a>\n        </p>\n\n        <p>\n          <a href=\"//www.youtube.com/channel/UCXeY9RpLlwONYgc2Ah-1rGA\">\n            youtube/Dos Gatos Creative\n          </a>\n        </p>\n\n        <p>\n          <a href=\"https://www.youtube.com/channel/UCDT9dBvD53u2UlO0NVrLMmQ\">\n            youtube/Joe Sak\n          </a>\n        </p>\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {\n    HashRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Switch>\n        <Route path=\"/\"><App /></Route>\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}